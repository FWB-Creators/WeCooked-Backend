generator gatewayServiceClient {
  provider = "prisma-client-js"
  output   = "../../gateway-service/node_modules/.prisma/client"
}

generator userServiceClient {
  provider = "prisma-client-js"
  output   = "../../user-service/node_modules/.prisma/client"
}

generator chefServiceClient {
  provider = "prisma-client-js"
  output   = "../../chef-service/node_modules/.prisma/client"
}

generator paymentServiceClient {
  provider = "prisma-client-js"
  output   = "../../payment-service/node_modules/.prisma/client"
}

generator videoServiceClient {
  provider = "prisma-client-js"
  output   = "../../video-service/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chef {
  chefId         Int    @id @default(autoincrement())
  chefName       String
  chefSurname    String
  chefBio        String
  chefSpecialty  String
  chefExperience String
  chefImage      String
  chefSex        String
  chefPhone      String @unique
  chefEmail      String @unique
  chefPassword   String

  courses Course[]  @relation("ChefCourses")
  groups  GroupID[] @relation("ChefGroups")
  users   User[]
}

model Course {
  courseId              Int    @id @default(autoincrement())
  courseTitle           String
  courseDetail          String
  coursePrice           Int
  courseCategory        String
  courseVideoPath       String
  courseChefId          Int
  courseIngredientPrice Int
  courseImage           String

  chef           Chef?            @relation("ChefCourses", fields: [courseChefId], references: [chefId])
  review         review[]
  listofTutorial listofTutorial[]
  timetracking   timetracking[]
  Dietary        Dietary[]
}

model Dietary {
  dietaryId       Int    @id @default(autoincrement())
  dietaryName     String
  dietaryCourseId Int

  courseId Course? @relation(fields: [dietaryCourseId], references: [courseId])
}

model GroupID {
  groupId                   Int      @id @default(autoincrement())
  groupTitle                String
  groupDetail               String
  groupPrice                Int
  groupIngredientDetail     String
  groupNumberofparticipants Int
  groupDate                 DateTime
  groupCategory             String
  groupLinkZoom             String   @unique
  groupPicture              String
  groupChefId               Int
  groupIngredientPrice      Int
  groupDescription          String

  chef Chef? @relation("ChefGroups", fields: [groupChefId], references: [chefId])
}

model User {
  userId          Int     @id @default(autoincrement())
  name            String
  surname         String
  userAddress     String?
  userProfile     String?
  favouriteChefId Int?
  Sex             String?
  userPhone       String? @unique
  userEmail       String  @unique
  password        String

  favChef Chef?    @relation(fields: [favouriteChefId], references: [chefId])
  review  review[]
  order   order[]
}

model review {
  reviewId        Int      @id @default(autoincrement())
  reviewUserId    Int
  reviewRating    Int
  reviewDetail    String?
  reviewTimestamp DateTime
  reviewCourseId  Int

  userId  User?   @relation(fields: [reviewUserId], references: [userId])
  coursId Course? @relation(fields: [reviewCourseId], references: [courseId])
}

model order {
  orderId              Int       @id @default(autoincrement())
  orderUserId          Int
  orderDate            DateTime
  orderFormat          String // group, course
  orderStatus          String // pending 
  orderWithIngredient  Boolean   @default(false)
  orderPrice           Int
  orderDeliveryDate    DateTime?
  orderDeliveryAddress String?

  userId User? @relation(fields: [orderUserId], references: [userId])
}

model tutorialvideo {
  tutorialId     Int              @id @default(autoincrement())
  tutorialVideo  String
  tutorialTitle  String
  listofTutorial listofTutorial[]
}

model listofTutorial {
  Id         Int @id @default(autoincrement())
  CourseId   Int
  TutorialId Int
  Timestamp  Int

  coursId    Course?        @relation(fields: [CourseId], references: [courseId])
  tutorialId tutorialvideo? @relation(fields: [TutorialId], references: [tutorialId])
}

model timetracking {
  timeId        Int     @id @default(autoincrement())
  timeCourseId  Int
  timeCountdown Int // duration
  timeTriggered Boolean @default(false) //stop or not
  timePopup     Int // Timestamp

  coursId Course? @relation(fields: [timeCourseId], references: [courseId])
}
