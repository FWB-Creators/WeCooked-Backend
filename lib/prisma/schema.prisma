generator gatewayServiceClient {
  provider = "prisma-client-js"
  output   = "../../gateway-service/node_modules/.prisma/client"
}

generator userServiceClient {
  provider = "prisma-client-js"
  output   = "../../user-service/node_modules/.prisma/client"
}

generator chefServiceClient {
  provider = "prisma-client-js"
  output   = "../../chef-service/node_modules/.prisma/client"
}

generator paymentServiceClient {
  provider = "prisma-client-js"
  output   = "../../payment-service/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chef {
  chefId         Int       @id @default(autoincrement())
  chefName       String
  chefSurname    String
  chefBio        String
  chefSpecialty  String
  chefExperience String
  chefImage      String
  chefSex        String
  chefPayment    Int?
  chefPhone      Int       @unique
  chefEmail      String    @unique
  chefPassword   String
  payment        Payment?  @relation(fields: [chefPayment], references: [paymentId])
  courses        Course[]  @relation("ChefCourses")
  groups         GroupID[] @relation("ChefGroups")
  users          User[]
}

model Course {
  courseId              Int          @id @default(autoincrement())
  courseTitle           String
  courseDetail          String
  coursePrice           Int
  courseCategory        String
  courseVideoId         Int?
  courseChefId          Int?
  courseIngredientPrice Int
  courseDietary         String[]
  courseImage           String
  video                 Video?       @relation(fields: [courseVideoId], references: [videoId])
  chef                  Chef?        @relation("ChefCourses", fields: [courseChefId], references: [chefId])
  reviews               Review[]
  orders                Order[]
  videoTools            VideoTools[]
}

model GroupID {
  groupId                   Int      @id @default(autoincrement())
  groupTitle                String
  groupDetail               String
  groupPrice                Float
  groupNumberOfParticipants Int
  groupDate                 DateTime
  groupCategory             String
  groupLinkZoom             String?  @unique
  groupPicture              String?
  groupChefId               Int?
  groupIngredientPrice      Int?
  groupDescription          String?
  chef                      Chef?    @relation("ChefGroups", fields: [groupChefId], references: [chefId])
}

model Payment {
  paymentId  Int     @id @default(autoincrement())
  cardNo     Int     @unique
  cardHolder String
  cvc        Int
  expireDate String
  users      User[]
  chefs      Chef[]
  orders     Order[]
}

model User {
  userId          Int      @id @default(autoincrement())
  name            String
  surname         String
  userAddress     String?
  userProfile     String?
  userPayment     Int?
  favouriteChefId Int?
  sex             String?
  userEmail       String   @unique
  userPhone       Int?     @unique
  password        String
  favChef         Chef?    @relation(fields: [favouriteChefId], references: [chefId])
  payment         Payment? @relation(fields: [userPayment], references: [paymentId])
  reviews         Review[]
  orders          Order[]
}

model Video {
  videoId    Int      @id @default(autoincrement())
  videoPath  String
  videoTitle String
  videoDate  DateTime
  courses    Course[]
}

model Review {
  reviewId        Int      @id @default(autoincrement())
  reviewUserId    Int
  reviewRating    Int
  reviewDetail    String?
  reviewTimestamp DateTime
  reviewCourseId  Int
  user            User?    @relation(fields: [reviewUserId], references: [userId])
  course          Course?  @relation(fields: [reviewCourseId], references: [courseId])
}

model Order {
  orderId              Int       @id @default(autoincrement())
  orderUserId          Int
  orderCourseId        Int
  orderPaymentId       Int
  orderDate            DateTime
  orderFormat          String
  orderWithIngredient  Boolean   @default(false)
  orderPrice           Float
  orderDeliveryDate    DateTime?
  orderDeliveryAddress DateTime?
  course               Course?   @relation(fields: [orderCourseId], references: [courseId])
  user                 User?     @relation(fields: [orderUserId], references: [userId])
  payment              Payment?  @relation(fields: [orderPaymentId], references: [paymentId])
}

model TutorialVideo {
  tutorialId    Int          @id @default(autoincrement())
  tutorialVideo String
  tutorialTitle String
  videoTools    VideoTools[]
}

model VideoTools {
  videoToolsId         Int            @id @default(autoincrement())
  videoToolsCourseId   Int
  videoToolsTutorialId Int
  videoToolsTimestamp  Int
  course               Course?        @relation(fields: [videoToolsCourseId], references: [courseId])
  tutorial             TutorialVideo? @relation(fields: [videoToolsTutorialId], references: [tutorialId])
}

model TimeTracking {
  timeId        Int     @id @default(autoincrement())
  timeVideoId   Int
  timeCountdown Int
  timeTriggered Boolean @default(false)
  timeStop      Int
}
