generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chef {
  ChefID         Int     @id @default(autoincrement())
  chefName       String
  chefSurname    String
  chefBio        String?
  chefSpecialty  String?
  chefExperience String?
  chefPicture    String?
  chefEmail      String? @unique
  chefPayment    Int?
  chefPhone      Int?    @unique
  chefUsername   String  @unique
  chefPassword   String

  Payment Payment?  @relation(fields: [chefPayment], references: [PaymentID])
  courses Course[]  @relation("ChefCourses")
  groups  GroupID[] @relation("ChefGroups")
  users   User[]
}

model Course {
  courseID       Int       @id @default(autoincrement())
  courseTitle    String
  courseDetail   String
  coursePrice    Int
  courseCategory String
  courseVideoId  Int?
  courseChefId   Int?
  coursePackId   String?
  PackName       PackName? @relation(fields: [coursePackId], references: [PackID]) //pack linked
  Video          Video?    @relation(fields: [courseVideoId], references: [VideoID])
  Chef           Chef?     @relation("ChefCourses", fields: [courseChefId], references: [ChefID])
}

model GroupID {
  GroupID                   Int       @id @default(autoincrement())
  groupTitle                String
  groupDetail               String?
  groupprice                Float?
  groupNumberofparticipants Int?
  groupDate                 DateTime?
  groupCategory             String
  groupLinkZoom             String?   @unique
  groupPicture              String?
  groupChefId               Int?
  groupPackId               String?
  Pack                      PackName? @relation(fields: [groupPackId], references: [PackID])
  Chef                      Chef?     @relation("ChefGroups", fields: [groupChefId], references: [ChefID])
}

model IngredientPack {
  ID           Int    @id @default(autoincrement())
  quantity     Int?
  packCode     String
  ingredientId Int?

  ingredient Ingredient? @relation(fields: [ingredientId], references: [IngredientID], onDelete: Cascade)
  PackName   PackName?   @relation(fields: [packCode], references: [PackID], onDelete: Cascade)
}

model PackName {
  PackID         String           @id @unique
  menuName       String?
  course         Course[]
  IngredientPack IngredientPack[]
  Group          GroupID[]
}

model Payment {
  PaymentID  Int     @id @default(autoincrement())
  cardNo     Int?    @unique
  cardHolder String?
  users      User[]
  chef       Chef[]
}

model User {
  UserID          Int      @id @default(autoincrement())
  name            String?
  surname         String?
  userAddress     String?
  userProfile     String?
  favouriteChefId Int?
  userPhone       Int?     @unique
  userEmail       String?
  userPayment     Int?
  username        String   @unique
  password        String
  favChef         Chef?    @relation(fields: [favouriteChefId], references: [ChefID])
  Payment         Payment? @relation(fields: [userPayment], references: [PaymentID])
}

model Video {
  VideoID    Int    @id @default(autoincrement())
  videoPath  String
  videoTitle String

  course Course[]
}

model Ingredient {
  IngredientID    Int              @id @default(autoincrement())
  ingredientName  String?          @unique
  ingredientPrice Float?
  ingredientpack  IngredientPack[]
}
