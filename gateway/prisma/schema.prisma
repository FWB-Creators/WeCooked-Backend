generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chef {
  chefId         Int       @id @default(autoincrement())
  chefName       String
  chefSurname    String
  chefBio        String?
  chefSpecialty  String?
  chefExperience String?
  chefPicture    String?
  chefEmail      String?   @unique
  chefPayment    Int?
  chefPhone      Int?      @unique
  chefUsername   String    @unique
  chefPassword   String
  payment        Payment?  @relation(fields: [chefPayment], references: [paymentId])
  courses        Course[]  @relation("ChefCourses")
  groups         GroupID[] @relation("ChefGroups")
  users          User[]
}

model Course {
  courseId       Int       @id @default(autoincrement())
  courseTitle    String
  courseDetail   String
  coursePrice    Int
  courseCategory String
  courseVideoId  Int?
  courseChefId   Int?
  coursePackId   String?
  packName       PackName? @relation(fields: [coursePackId], references: [packId]) //pack linked
  video          Video?    @relation(fields: [courseVideoId], references: [videoID])
  chef           Chef?     @relation("ChefCourses", fields: [courseChefId], references: [chefId])
  review         Review[]
  order          Order[]
}

model GroupID {
  groupId                   Int       @id @default(autoincrement())
  groupTitle                String
  groupDetail               String
  groupPrice                Float
  groupNumberofparticipants Int
  groupDate                 DateTime
  groupCategory             String
  groupLinkZoom             String?   @unique
  groupPicture              String?
  groupChefId               Int?
  groupPackId               String?
  pack                      PackName? @relation(fields: [groupPackId], references: [packId])
  chef                      Chef?     @relation("ChefGroups", fields: [groupChefId], references: [chefId])
}

model IngredientPack {
  id           Int         @id @default(autoincrement())
  ingredientId Int
  quantity     Int
  packCode     String
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [ingredientId], onDelete: Cascade)
  packName     PackName?   @relation(fields: [packCode], references: [packId], onDelete: Cascade)
}

model PackName {
  packId         String           @id @unique
  menuName       String
  course         Course[]
  ingredientPack IngredientPack[]
  group          GroupID[]
}

model Payment {
  paymentId  Int     @id @default(autoincrement())
  cardNo     Int     @unique
  cardHolder String
  users      User[]
  chef       Chef[]
  order      Order[]
}

model User {
  userId          Int      @id @default(autoincrement())
  name            String?
  surname         String?
  userAddress     String?
  userProfile     String?
  favouriteChefId Int?
  sex             String?
  userPhone       Int?     @unique
  userEmail       String?  @unique
  userPayment     Int?
  username        String   @unique
  password        String
  favChef         Chef?    @relation(fields: [favouriteChefId], references: [chefId])
  payment         Payment? @relation(fields: [userPayment], references: [paymentId])
  review          Review[]
  order           Order[]
}

model Video {
  videoID    Int      @id @default(autoincrement())
  videoPath  String
  videoTitle String
  course     Course[]
}

model Ingredient {
  ingredientId    Int              @id @default(autoincrement())
  ingredientName  String?          @unique
  ingredientPrice Float?
  ingredientpack  IngredientPack[]
}

model Review {
  reviewId        Int      @id @default(autoincrement())
  reviewUserId    Int
  reviewRating    Int
  reviewDetail    String?
  reviewTimestamp DateTime
  reviewCourseId  Int
  userId          User?    @relation(fields: [reviewUserId], references: [userId])
  coursId         Course?  @relation(fields: [reviewCourseId], references: [courseId])
}

model Order {
  orderId             Int      @id @default(autoincrement())
  orderUserId         Int
  orderCourseId       Int
  orderPaymentId      Int
  orderDate           DateTime
  orderFormat         String
  orderWithIngredient Boolean  @default(false)
  orderPrice          Float
  coursId             Course?  @relation(fields: [orderCourseId], references: [courseId])
  userId              User?    @relation(fields: [orderUserId], references: [userId])
  paymentId           Payment? @relation(fields: [orderPaymentId], references: [paymentId])
}
